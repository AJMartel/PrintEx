/********************************************************************************    Copyright 2015 Christopher Andrews.	https://github.com/Chris--A/PrintEx    Released under MIT licence.********************************************************************************/#ifndef HEADER_MEMORYPRINTER    #define HEADER_MEMORYPRINTER        #include "NonStreamingIO.h"    #include "PrintExtension.h"          /***************************************************************************        EEPROMPrinter Class.            An IO class for Print functionality targeting EEPROM memory.    ***************************************************************************/    #ifdef __AVR__        #include <avr/eeprom.h>        class EEPROMPrinter             : public NonStreamingIO, public PrintExtension, public Printable{            public:                template< typename T >                     EEPROMPrinter( const T dataPtr ) 						: NonStreamingIO( ( uint8_t* ) dataPtr ), Printable()                         { return; }                                template< typename T >                     EEPROMPrinter( const T dataPtr, const unsigned int length    )						: NonStreamingIO( ( uint8_t* ) dataPtr, length ), Printable()                         { return; }                    size_t write( uint8_t data );            protected:                friend class Print;                size_t printTo(Print& p) const;            private:        };    #endif    /***************************************************************************        SRAMPrinter Class.            An IO class for Print functionality targeting SRAM memory.    ***************************************************************************/        class SRAMPrinter         : public NonStreamingIO, public PrintExtension{        public:            template< typename T >                 SRAMPrinter( const T dataPtr ) 					: NonStreamingIO( ( uint8_t* ) dataPtr )                     { return; }                            template< typename T >                 SRAMPrinter( const T dataPtr, const unsigned int length    ) 					: NonStreamingIO( ( uint8_t* ) dataPtr, length )                     { return; }                                    operator char*( void ) { return start[ len++ ] = '\0', ( char* ) start; }                void end( void ) { start[ len++ ] = '\0'; }                size_t write( uint8_t data );        protected:        private:    };        /***************************************************************************        PROGMEMPrinter Class.            This class encapsulates PROGMEM functionality.    ***************************************************************************/    #ifdef __AVR__        class PROGMEMPrinter            : public Printable{            public:                template< typename T >                     PROGMEMPrinter( const T dataPtr ) : start( ( uint8_t* ) dataPtr )                         { return; }                                        PROGMEMPrinter &operator =( uint8_t *t ) { return start = t, *this; }                            protected:                friend class Print;                size_t printTo(Print& p) const;            private:                uint8_t *start;        };    #endif    typedef SRAMPrinter    GString;    #ifdef __AVR__        typedef EEPROMPrinter  EString;        typedef PROGMEMPrinter PString;    #endif#endif//EOF