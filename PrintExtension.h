/********************************************************************************	Copyright 2015 Christopher Andrews (http://arduino.land)		Released under MIT licence.********************************************************************************/#ifndef HEADER_PRINTEXTENSION	#define HEADER_PRINTEXTENSION		#include "Arduino.h"		#ifndef _INLINE_		#define _INLINE_		__attribute__( ( always_inline ) ) inline	#endif		typedef size_t pft;	typedef uint8_t pfct;	/*		pfct:		If you want to use large outputs, and do not care about the return count,		leave the setting as is. This will allow more optimised code, but writes		larger than 255 characters will have incorrect counts returned. 		Otherwise replace uint8_t with a larger integer.	*/			//virtual not needed.	class PrintExtension : public Print{			public:					template< typename T > 				_INLINE_ PrintExtension &operator +=( const T &t )								{ 						return concat( t ); 					}				template< typename T > 				_INLINE_ PrintExtension &concat( const T &t )										{ 						print( t ); 						return *this; 					}							template< typename T > 				_INLINE_ PrintExtension &concat( const T &t, const int i )						{ 						print( t, i ); 						return *this;					}				template< typename T > 				_INLINE_ PrintExtension &concatln( const T &t )										{ 						println( t ); 						return *this; 					}							template< typename T > 				_INLINE_ PrintExtension &concatln( const T &t, const int i )						{ 						println( t, i ); 						return *this;					}												pft printf( const char *format, ... );						void repeat( const char &c_Character, unsigned char u_Count );								protected:					//friend int sprintf( char * str, const char * format, ... );//#if __cplusplus < 201103L || !defined(__GXX_EXPERIMENTAL_CXX0X__)						pft _printf( const char *format, const va_list &v_List );//#endif		private:					void cwrite( uint8_t u_Data, pfct &p_Counter );	};			struct StreamEx : Stream, PrintExtension{			StreamEx( Stream &in ) : stream(in) {}				int available( void )               { return stream.available(); }		void flush( void )                  { stream.flush(); }		int peek( void )                    { return stream.peek(); }		int read( void )                    { return stream.read(); }	    size_t write( uint8_t data )        { return stream.write(data); }		Stream &stream;	};#endif//EOF	